# Command to build image:
# docker builder prune
# docker build -t backend-fastapi-prod -f .\dockerfile.prod .

# More Information:
# docker build -t backend-fastapi-prod -f .\dockerfile.prod . --progress=plain

# Run container:
# docker run -d --restart=always --name backend-fastapi-prod -p 3000:3000 frontend-nuxt-prod

# Export image:
# docker save backend-fastapi-prod | gzip > backend-fastapi-prod

FROM tensorflow/tensorflow:2.12.0

ARG ROOT_PATH_ARG='/api/v1'
ARG ALLOWED_IPS_ARG='*'
ARG HOST_ARG='0.0.0.0'
ARG PORT=8000
# ARG POSTGRES_DB_HOST_ARG='database:5432'
# ARG POSTGRES_DB_ARG='db_1'
# ARG POSTGRES_USER_ARG='db_user'
# ARG POSTGRES_PASSWORD_ARG='db_password'

# ENV POSTGRES_DB_HOST=${POSTGRES_DB_HOST_ARG}
# ENV POSTGRES_DB=${POSTGRES_DB_ARG}
# ENV POSTGRES_USER=${POSTGRES_USER_ARG}
# ENV POSTGRES_PASSWORD=${POSTGRES_PASSWORD_ARG}
ENV ROOT_PATH=${ROOT_PATH_ARG}
ENV ALLOWED_IPS=${ALLOWED_IPS_ARG}
ENV HOST=${HOST_ARG}
ENV DATABASE_URL='postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_DB_HOST/$POSTGRES_DB'

RUN pip install fastapi
RUN pip install uvicorn
RUN pip install psycopg2-binary
RUN pip install sqlmodel

# WebRTC library for Python
RUN pip install aiortc

# KI
# RUN apt-get update && apt-get install libgl1
# RUN pip install opencv-python
RUN pip install opencv-python-headless
RUN pip install dlib

# multiprocess extends multiprocessing to provide enhanced serialization, using dill
RUN pip install dill
RUN pip install msgpack-numpy

WORKDIR /app

COPY . .

EXPOSE ${PORT}

CMD ["uvicorn", "main:app", "--proxy-headers", "--host", "${HOST}", "--port", "8000", "--root-path", "${ROOT_PATH}", "--forwarded-allow-ips", "${ALLOWED_IPS}"]
